{"version":3,"sources":["components/Home.js","components/Classic.js","App.js","reportWebVitals.js","index.js"],"names":["Home","React","createElement","Link","to","Classic","inputValue","setInputValue","useState","maskedRiders","setMaskedRiders","filteredRiders","setFilteredRiders","selectedRiders","setSelectedRiders","randomRider","setRandomRider","showCongrats","setShowCongrats","isDropdownOpen","setIsDropdownOpen","useEffect","fetch","then","response","text","csvText","results","Papa","parse","header","data","pickRandomRider","catch","error","console","riders","randomIndex","Math","floor","random","length","log","handleRestart","compareWords","selectedValue","randomValue","selectedWords","toLowerCase","split","randomWords","allWordsMatch","every","selectedWord","includes","someWordsMatch","some","compareNumbers","selectedNum","parseFloat","randomNum","isNaN","handleDropdownToggle","className","onClick","type","value","onChange","e","target","filtered","filter","rider","_rider$Character","characterName","Character","replace","startsWith","find","selected","placeholder","map","index","key","riderName","fullRider","handleRiderClick","comparison","compareAttributes","Gender","Species","Affiliation","Ep","Form","Era","Release","isRiderTypeGreen","isRiderTypeYellow","isEyesColorsGreen","isEyesColorsYellow","isSpeciesGreen","isSpeciesYellow","isAffiliationGreen","isAffiliationYellow","isEpGreen","isEpYellow","isFormGreen","isFormYellow","isEraGreen","isReleaseGreen","isReleaseYellow","style","backgroundColor","color","textAlign","fontWeight","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a4485ee0.chunk.js","sourcesContent":["// src/components/Home.js\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Guess the Masked Rider Character</h1>\r\n      <Link to=\"/classic\">\r\n        <button>Start</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/classic.css\";\r\nimport Papa from \"papaparse\";\r\n\r\nconst Classic = () => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [maskedRiders, setMaskedRiders] = useState([]);\r\n  const [filteredRiders, setFilteredRiders] = useState([]);\r\n  const [selectedRiders, setSelectedRiders] = useState([]);\r\n  const [randomRider, setRandomRider] = useState(null);\r\n  const [showCongrats, setShowCongrats] = useState(false);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/maskedRiders.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        const results = Papa.parse(csvText, { header: true });\r\n        setMaskedRiders(results.data);\r\n        pickRandomRider(results.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching CSV file:\", error));\r\n  }, []);\r\n\r\n  const pickRandomRider = (riders) => {\r\n    const randomIndex = Math.floor(Math.random() * riders.length);\r\n    setRandomRider(riders[randomIndex]);\r\n    console.log(riders[randomIndex]); // Log the random rider\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInputValue(value);\r\n\r\n    if (value) {\r\n      const filtered = maskedRiders.filter((rider) => {\r\n        const characterName = rider.Character?.toLowerCase().replace(\r\n          \"kamen rider \",\r\n          \"\"\r\n        );\r\n        return (\r\n          characterName &&\r\n          characterName.startsWith(value.toLowerCase()) &&\r\n          !selectedRiders.find(\r\n            (selected) => selected.Character === rider.Character\r\n          )\r\n        );\r\n      });\r\n      setFilteredRiders(filtered);\r\n    } else {\r\n      setFilteredRiders([]);\r\n    }\r\n  };\r\n\r\n  const handleRiderClick = (riderName) => {\r\n    handleDropdownToggle();\r\n    const alreadySelected = selectedRiders.find(\r\n      (rider) => rider.Character === riderName\r\n    );\r\n\r\n    if (!alreadySelected) {\r\n      const fullRider = maskedRiders.find(\r\n        (rider) => rider.Character === riderName\r\n      );\r\n      setSelectedRiders([...selectedRiders, fullRider]);\r\n      setFilteredRiders(\r\n        filteredRiders.filter((rider) => rider.Character !== riderName)\r\n      );\r\n      setInputValue(\"\"); // Clear the input box\r\n\r\n      if (fullRider.Character === randomRider.Character) {\r\n        setShowCongrats(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setSelectedRiders([]);\r\n    setInputValue(\"\");\r\n    setFilteredRiders([]);\r\n    setShowCongrats(false);\r\n    pickRandomRider(maskedRiders);\r\n  };\r\n\r\n  const compareAttributes = (selected, random) => {\r\n    const comparison = {};\r\n    comparison.Character = selected.Character === random.Character;\r\n    comparison.Gender = selected.Gender === random.Gender;\r\n    comparison[\"Rider type\"] = compareWords(\r\n      selected[\"Rider type\"],\r\n      random[\"Rider type\"]\r\n    );\r\n    comparison[\"Eyes colors\"] = compareWords(\r\n      selected[\"Eyes colors\"],\r\n      random[\"Eyes colors\"]\r\n    );\r\n    comparison.Species = compareWords(selected.Species, random.Species);\r\n    comparison.Affiliation = compareWords(\r\n      selected.Affiliation,\r\n      random.Affiliation\r\n    );\r\n    comparison[\"First appear\"] = compareWords(\r\n      selected[\"First appear\"],\r\n      random[\"First appear\"]\r\n    );\r\n    comparison.Ep = compareNumbers(selected.Ep, random.Ep);\r\n    comparison.Form = compareNumbers(selected.Form, random.Form);\r\n    comparison.Era = selected.Era === random.Era;\r\n    comparison.Release = compareNumbers(selected.Release, random.Release);\r\n\r\n    return comparison;\r\n  };\r\n\r\n  const compareWords = (selectedValue, randomValue) => {\r\n    if (!selectedValue || !randomValue) {\r\n      return false;\r\n    }\r\n\r\n    const selectedWords = selectedValue.toLowerCase().split(/[ ,]+/);\r\n    const randomWords = randomValue.toLowerCase().split(/[ ,]+/);\r\n\r\n    const allWordsMatch = selectedWords.every((selectedWord) =>\r\n      randomWords.includes(selectedWord)\r\n    );\r\n    const someWordsMatch = selectedWords.some((selectedWord) =>\r\n      randomWords.includes(selectedWord)\r\n    );\r\n\r\n    return allWordsMatch ? \"=\" : someWordsMatch ? \"~\" : false;\r\n  };\r\n\r\n  const compareNumbers = (selectedValue, randomValue) => {\r\n    if (!selectedValue || !randomValue) return false;\r\n    const selectedNum = parseFloat(selectedValue);\r\n    const randomNum = parseFloat(randomValue);\r\n    if (isNaN(selectedNum) || isNaN(randomNum)) return false;\r\n    return selectedNum === randomNum\r\n      ? \"=\"\r\n      : selectedNum > randomNum\r\n      ? \"↓\"\r\n      : \"↑\";\r\n  };\r\n\r\n  const handleDropdownToggle = () => {\r\n    setIsDropdownOpen(!isDropdownOpen); // Toggle dropdown state\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <Link to=\"/\">\r\n          <button>Home</button>\r\n        </Link>\r\n      </header>\r\n\r\n      <div className=\"container\">\r\n        <h2>Guess the Masked Rider Character</h2>\r\n        {showCongrats ? (\r\n          <div className=\"congrats-message\">\r\n            <p2>Congratulations! You guessed the correct rider!</p2><br></br>\r\n            <button onClick={handleRestart}>Restart</button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <p>Type any character to begin</p>\r\n            <input\r\n              type=\"text\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Type here\"\r\n              onClick={handleDropdownToggle}\r\n            />\r\n\r\n            <div className=\"dropdown-container\">\r\n              {filteredRiders.length > 0 && isDropdownOpen && (\r\n                <ul className=\"dropdown\">\r\n                  {filteredRiders.map((rider, index) => (\r\n                    <li\r\n                      key={index}\r\n                      onClick={() => handleRiderClick(rider.Character)}\r\n                    >\r\n                      {rider.Character}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n            <button onClick={handleRestart}>Restart</button>\r\n          </div>\r\n        )}\r\n\r\n        {selectedRiders.length > 0 && (\r\n          <table className=\"rider-details\">\r\n            <thead>\r\n              <tr>\r\n                <th>Character</th>\r\n                <th>Gender</th>\r\n                <th>Rider type</th>\r\n                <th>Eyes colors</th>\r\n                <th>Species</th>\r\n                <th>Affiliation</th>\r\n                <th>First appear</th>\r\n                <th>Ep</th>\r\n                <th>Form</th>\r\n                <th>Era</th>\r\n                <th>Release</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {selectedRiders.map((rider, index) => {\r\n                const comparison = compareAttributes(rider, randomRider);\r\n\r\n                const isRiderTypeGreen = comparison[\"Rider type\"] === \"=\";\r\n                const isRiderTypeYellow = comparison[\"Rider type\"] === \"~\";\r\n                const isEyesColorsGreen = comparison[\"Eyes colors\"] === \"=\";\r\n                const isEyesColorsYellow = comparison[\"Eyes colors\"] === \"~\";\r\n                const isSpeciesGreen = comparison.Species === \"=\";\r\n                const isSpeciesYellow = comparison.Species === \"~\";\r\n                const isAffiliationGreen = comparison.Affiliation === \"=\";\r\n                const isAffiliationYellow = comparison.Affiliation === \"~\";\r\n                const isEpGreen = comparison.Ep === \"=\";\r\n                const isEpYellow =\r\n                  comparison.Ep === \"<\" || comparison.Ep === \">\";\r\n                const isFormGreen = comparison.Form === \"=\";\r\n                const isFormYellow =\r\n                  comparison.Form === \"<\" || comparison.Form === \">\";\r\n                const isEraGreen = comparison.Era;\r\n                const isReleaseGreen = comparison.Release === \"=\";\r\n                const isReleaseYellow =\r\n                  comparison.Release === \"<\" || comparison.Release === \">\";\r\n\r\n                return (\r\n                  <tr key={index}>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: comparison.Character ? \"#68d391\" : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Character}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: comparison.Gender ? \"#68d391\" : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Gender}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isRiderTypeGreen\r\n                          ? \"#68d391\"\r\n                          : isRiderTypeYellow\r\n                          ? \"#ecc94b\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider[\"Rider type\"]}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isEyesColorsGreen\r\n                          ? \"#68d391\"\r\n                          : isEyesColorsYellow\r\n                          ? \"#ecc94b\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider[\"Eyes colors\"]}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isSpeciesGreen\r\n                          ? \"#68d391\"\r\n                          : isSpeciesYellow\r\n                          ? \"#ecc94b\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Species}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isAffiliationGreen\r\n                          ? \"#68d391\"\r\n                          : isAffiliationYellow\r\n                          ? \"#ecc94b\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Affiliation}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: comparison[\"First appear\"]\r\n                          ? \"#68d391\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider[\"First appear\"]}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isEpGreen\r\n                          ? \"#68d391\"\r\n                          : isEpYellow\r\n                          ? \"#ecc94b\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Ep} {comparison.Ep}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isFormGreen\r\n                          ? \"#68d391\"\r\n                          : isFormYellow\r\n                          ? \"#ecc94b\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Form} {comparison.Form}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isEraGreen ? \"#68d391\" : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Era}\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        backgroundColor: isReleaseGreen\r\n                          ? \"#68d391\"\r\n                          : isReleaseYellow\r\n                          ? \"#ecc94b\"\r\n                          : \"#a13636\",\r\n                        color: \"black\",\r\n                        textAlign: \"center\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {rider.Release} {comparison.Release}\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Classic;\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './components/Home';\nimport Classic from './components/Classic';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/classic\" element={<Classic />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}